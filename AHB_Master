module AHB_Master(
  input Hclk, Hresetn, Hreadyout,       
  input [1:0] Hresp,                    
  input [31:0] Hrdata,                  
  output reg Hwrite, Hreadyin,           
  output reg [1:0] Htrans,               
  output reg [31:0] Hwdata, Haddr       
);

reg [31:0] read_data;


initial begin
  Hwrite = 0;
  Htrans = 2'b00; 
  Hreadyin = 0;
  Haddr = 0;
  Hwdata = 0;
  read_data = 0;
end


task single_write(input [31:0] addr, input [31:0] data);
  begin
    @(posedge Hclk)
    #2;
    begin
      Hwrite = 1;          
      Htrans = 2'b10;      
      Hreadyin = 1;        
      Haddr = addr;        
      Hwdata = data;       
    end

    
    @(posedge Hclk);
    while (!Hreadyout) begin
      @(posedge Hclk);  
    end

    #2;
    begin
      Htrans = 2'b00;      
      Hwrite = 0;          
    end
  end
endtask


task single_read(input [31:0] addr);
  begin
    @(posedge Hclk)
    #2;
    begin
      Hwrite = 0;          
      Htrans = 2'b10;   
      Hreadyin = 1;        
      Haddr = addr;     
    end

    
    @(posedge Hclk);
    while (!Hreadyout) begin
      @(posedge Hclk);  
    end

    #2;
    begin
      
      if (Hresp == 2'b00) begin
        
        read_data = Hrdata;  
        $display("Read Data from Slave: %h", read_data);  
      end
      else if (Hresp == 2'b01) begin
        
        $display("Error in AHB read transaction!");
      end
      else if (Hresp == 2'b10) begin
        
        $display("AHB slave requested retry.");
      end
      else if (Hresp == 2'b11) begin
        
        $display("AHB slave requested split.");
      end

      Htrans = 2'b00;       
    end
  end
endtask


always @(posedge Hclk or negedge Hresetn) begin
  if (~Hresetn) begin
    // Reset all signals when reset is active (Hresetn = 0)
    Hwrite <= 0;
    Htrans <= 2'b00;  // IDLE state
    Hreadyin <= 0;
    Haddr <= 0;
    Hwdata <= 0;
    read_data <= 0;
  end
end

endmodule


